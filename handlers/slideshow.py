import asyncio
from random import shuffle
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from data import bot
from sql import data_media
from states.states import SlideShowState

router = Router()

# üì∏ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Ö –ø–æ–¥–ø–∏—Å—è–º–∏
PHOTO_LIST = [[photo[2], photo[3]] for photo in data_media.sql_get_all_photo()]



def get_keyboard(paused=False):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    buttons = [
        [InlineKeyboardButton(text="‚Üê", callback_data="prev"),
         InlineKeyboardButton(text="||" if not paused else "·êÖ", callback_data="pause" if not paused else "play"),
         InlineKeyboardButton(text="‚Üí", callback_data="next")],
        [ InlineKeyboardButton(text='‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏', callback_data='‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏')]

    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(F.text == "/slider")
async def start_slideshow(message: Message, state: FSMContext):

    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–∞–π–¥—à–æ—É –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è."""
    if not PHOTO_LIST:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–ª–∞–π–¥—à–æ—É.")
        return
    shuffle(PHOTO_LIST)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    index = 0
    photo_id, caption = PHOTO_LIST[index]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
    msg = await message.answer_photo(photo=photo_id, reply_markup=get_keyboard())
    await message.delete()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–µ—è
    await state.set_state(SlideShowState.viewing)
    await state.update_data(index=index, msg_id=msg.message_id, playing=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–ª–µ–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await asyncio.sleep(3)
    await asyncio.create_task(autoplay_slideshow(message.chat.id, state))


@router.callback_query(F.data.in_(["prev", "next", "pause", "play"]))
async def slideshow_controls(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    if "index" not in data:
        await callback.answer("‚ùå –°–ª–∞–π–¥—à–æ—É –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
        return

    index = data["index"]
    msg_id = data["msg_id"]
    playing = data.get("playing", False)

    if callback.data == "prev":  # ‚èÆ –ù–∞–∑–∞–¥ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É)
        index = (index - 1) % len(PHOTO_LIST)
    elif callback.data == "next":  # ‚è≠ –í–ø–µ—Ä—ë–¥ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É)
        index = (index + 1) % len(PHOTO_LIST)
    elif callback.data == "pause":  # ‚è∏ –ü–∞—É–∑–∞
        await state.update_data(playing=False)
        await update_photo(callback.message.chat.id, msg_id, index, paused=True)
        await callback.answer("–°–ª–∞–π–¥—à–æ—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    elif callback.data == "play":  # ‚ñ∂ –ü–ª–µ–π
        await state.update_data(playing=True)
        await update_photo(callback.message.chat.id, msg_id, index, paused=False)
        await callback.answer("–°–ª–∞–π–¥—à–æ—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await asyncio.create_task(autoplay_slideshow(callback.message.chat.id, state))
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await state.update_data(index=index)
    await update_photo(callback.message.chat.id, msg_id, index, paused=not playing)
    await callback.answer()


async def update_photo(chat_id: int, message_id: int, index: int, paused=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –º–µ–Ω—è–µ—Ç –∫–Ω–æ–ø–∫–∏."""
    photo_id, caption = PHOTO_LIST[index]
    try:
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=message_id,
            media=InputMediaPhoto(media=photo_id),
            reply_markup=get_keyboard(paused)
        )
    except TelegramBadRequest:
        pass


async def autoplay_slideshow(chat_id: int, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
    while (await state.get_data()).get("playing", False):
        data = await state.get_data()
        current_index = data["index"]
        msg_id = data["msg_id"]
        next_index = (current_index + 1) % len(PHOTO_LIST)

        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚Äî –ø–µ—Ä–≤–∞—è, –∑–Ω–∞—á–∏—Ç —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω
        if next_index == 0:
            await state.update_data(index=0, playing=False)
            await update_photo(chat_id, msg_id, 0, paused=True)
            break
        else:
            await state.update_data(index=next_index)
            await update_photo(chat_id, msg_id, next_index)

        await asyncio.sleep(3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–ª–µ—è

