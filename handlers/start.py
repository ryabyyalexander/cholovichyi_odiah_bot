import asyncio
from random import shuffle
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, CallbackQuery
from aiogram import Router, F
from data import admins, bot
from data.functions import start_info, data_time, get_usd_exchange_rate
from data.lexicon import intro, caption_intro, rest
from handlers.slideshow import get_keyboard
from keyboards.ikb import simple_ikb
from sql import data_users, data_product, data_media
from states.states import State_album, SlideShowState

router = Router()

PHOTO_LIST = [[photo[2], photo[3]] for photo in data_media.sql_get_all_photo()]


# def get_keyboard(paused=False):
#     """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
#     buttons = [
#         [InlineKeyboardButton(text="‚Üê", callback_data="prev"),
#          InlineKeyboardButton(text="||" if not paused else "·êÖ", callback_data="pause" if not paused else "play"),
#          InlineKeyboardButton(text="‚Üí", callback_data="next")],
#         [InlineKeyboardButton(text='‚ûî      –Ω–æ–≤–∏–Ω–∫–∏', callback_data='‚ûî      –Ω–æ–≤–∏–Ω–∫–∏'), InlineKeyboardButton(text='‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏', callback_data='‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏')]
#
#     ]
#     return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(F.text == '/start')
async def process_start_command(message: Message, state: FSMContext):
    # üì∏ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Ö –ø–æ–¥–ø–∏—Å—è–º–∏
    shuffle(PHOTO_LIST)

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(message.from_user.id)
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    user_name = message.from_user.username
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" –Ω–∞ 0
    data_users.update_user_blocked(user_id, 0)
    # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ —Å id –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False - "–Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑"
    data_users.sql_new_user(user_id, first_name, last_name, user_name,
                            True if user_id in admins else False)
    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ø—Ç–∏–æ–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    list_capt = start_info()
    await state.set_state(State_album.start)
    caption_start_info = "\n".join(list_capt)
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
    restart_count = data_users.get_restart_count(user_id)
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ + 1
    await state.update_data(restart_count=restart_count)
    formatted_date = data_time()
    usd_rate = get_usd_exchange_rate()

    shuffle(rest)

    if restart_count < 1:
        await message.answer(text="""

üö∂üèªüë´    üèÉüèª‚Äç‚ôÇÔ∏èüö∂üèª   üöòüöñ  üë´üö∂üèªüë´
–ú‚≠ïÔ∏è–î–ù–ò–ô –®–û–ü–Ü–ù–ì –í  –û–î–ï–°–Ü""")

    else:
        await message.answer(text = f'{rest[0]}'
        )

    # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –°–¢–ê–†–¢ - –∑–∞–ø—É—Å–∫ –ò–ù–¢–†–û
    if restart_count < 1000:
        data_users.update_restart_count(user_id)
        try:
            captions = caption_intro.split('\n')
            video = intro
            current_caption = captions[0]

            msg = await message.answer_video(video=video,
                                             caption=f'''
                                             
{current_caption}

<code>{formatted_date}
–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:</code>

{caption_start_info}

<b>1 –¥–æ–ª–ª - {round(usd_rate, 2)} UAH</b>   <i>(–∑ —Å–∞–π—Ç—É –ù–ë–£)</i>
''', reply_markup=simple_ikb(2, '‚ûî      –Ω–æ–≤–∏–Ω–∫–∏', '‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏'))

            await message.delete()
            k = 0
            while True:
                k = (k + 1) % len(captions)
                await asyncio.sleep(2)
                new_caption = captions[k]
                try:
                    await bot.edit_message_caption(
                        chat_id=msg.chat.id,
                        message_id=msg.message_id,
                        caption=f'''
{new_caption}

<code>{formatted_date}
–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ:</code>   
                       
{caption_start_info}

<b>1 –¥–æ–ª–ª - {round(usd_rate, 2)} UAH</b>   <i>(–∑ —Å–∞–π—Ç—É –ù–ë–£)</i>
''', reply_markup=simple_ikb(2, '‚ûî      –Ω–æ–≤–∏–Ω–∫–∏', '‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏'))
                except TelegramBadRequest:
                    pass
                    break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

        except TelegramBadRequest:
            pass
        #    else:
        #         capt = f"""<code>{formatted_date}
        # </code>
        # {caption_start_info}
        #
        # <code>1 –¥–æ–ª–ª - {round(usd_rate, 2)} UAH</code>"""
        #
        #         """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–∞–π–¥—à–æ—É –±–µ–∑ –º–µ—Ä—Ü–∞–Ω–∏—è."""
        #         if not PHOTO_LIST:
        #             await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–ª–∞–π–¥—à–æ—É.")
        #             return
        #
        #         # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        #         index = 0
        #         photo_id, caption = PHOTO_LIST[index]
        #
        #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        #         msg = await message.answer_photo(photo=photo_id, caption=capt, reply_markup=get_keyboard())
        #         await message.delete()
        #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–µ—è
        #         await state.set_state(SlideShowState.viewing)
        #         await state.update_data(index=index, msg_id=msg.message_id, playing=True)
        #
        #         # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–ª–µ–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        #         await asyncio.sleep(3)
        #         await asyncio.create_task(autoplay_slideshow(message.chat.id, state))
        #
        #         await message.delete()

        data_users.update_restart_count(user_id)


# @router.callback_query(F.data.in_(["prev", "next", "pause", "play"]))
# async def slideshow_controls(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
#     data = await state.get_data()
#     if "index" not in data:
#         await callback.answer("‚ùå –°–ª–∞–π–¥—à–æ—É –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
#         return
#
#     index = data["index"]
#     msg_id = data["msg_id"]
#     playing = data.get("playing", False)
#
#     if callback.data == "prev":  # ‚èÆ –ù–∞–∑–∞–¥ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É)
#         index = (index - 1) % len(PHOTO_LIST)
#     elif callback.data == "next":  # ‚è≠ –í–ø–µ—Ä—ë–¥ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É)
#         index = (index + 1) % len(PHOTO_LIST)
#     elif callback.data == "pause":  # ‚è∏ –ü–∞—É–∑–∞
#         await state.update_data(playing=False)
#         await update_photo(callback.message.chat.id, msg_id, index, paused=True)
#         await callback.answer("–°–ª–∞–π–¥—à–æ—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
#         return
#     elif callback.data == "play":  # ‚ñ∂ –ü–ª–µ–π
#         await state.update_data(playing=True)
#         await update_photo(callback.message.chat.id, msg_id, index, paused=False)
#         await callback.answer("–°–ª–∞–π–¥—à–æ—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
#         await asyncio.create_task(autoplay_slideshow(callback.message.chat.id, state))
#         return
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
#     await state.update_data(index=index)
#     await update_photo(callback.message.chat.id, msg_id, index, paused=not playing)
#     await callback.answer()


# async def update_photo(chat_id: int, message_id: int, index: int, paused=False):
#     """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –º–µ–Ω—è–µ—Ç –∫–Ω–æ–ø–∫–∏."""
#     photo_id, caption = PHOTO_LIST[index]
#     formatted_date = data_time()
#     usd_rate = get_usd_exchange_rate()
#     list_capt = start_info()
#     caption_start_info = "\n".join(list_capt)
#     capt = f"""<code>{formatted_date}
# </code>
# {caption_start_info}
#
# <code>1 –¥–æ–ª–ª - {round(usd_rate, 2)} UAH</code>"""
#     try:
#         await bot.edit_message_media(
#             chat_id=chat_id,
#             message_id=message_id,
#             media=InputMediaPhoto(media=photo_id, caption=capt),  # –î–æ–±–∞–≤–∏–ª caption
#             reply_markup=get_keyboard(paused)
#         )
#     except TelegramBadRequest:
#         pass
#
#
# async def autoplay_slideshow(chat_id: int, state: FSMContext):
#     """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É."""
#     while (await state.get_data()).get("playing", False):
#         data = await state.get_data()
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Å–ª–∞–π–¥—à–æ—É
#         if not data.get("playing", False):
#             break
#
#         index = (data["index"] + 1) % len(PHOTO_LIST)  # –ê–≤—Ç–æ–ø–ª–µ–π –∏–¥—ë—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É
#         msg_id = data["msg_id"]
#
#         await state.update_data(index=index)
#         await update_photo(chat_id, msg_id, index)
#
#         await asyncio.sleep(3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–ª–µ—è


@router.message(F.text.lower().in_(['==']))
async def process_total_command(message: Message):
    await message.delete()
    formatted_date = data_time()
    results = data_product.get_total_products()[1:]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    output = []
    for row in results:
        if row[0] == '–ò–¢–û–ì–û':
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ "–ò–¢–û–ì–û"
            output.append(f"{row[0]}\t\t\t{row[4]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {row[2]}\n{formatted_date}")
        else:
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å "www" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            name = row[1].split('\n')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º —Ç–æ–≤–∞—Ä–∞
            output.append(f"{row[0]} - {name}\t - {row[2]}\t * {row[3]}\t = {row[4]}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await message.answer("\n".join(output), reply_markup=simple_ikb(1, '‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏'))


@router.callback_query(F.data.in_(['‚úñÔ∏è –∑–∞–∫—Ä–∏—Ç–∏']))
async def process_sl(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–ª–∞–π–¥—à–æ—É."""

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–∞–π–¥—à–æ—É
    await state.update_data(playing=False)

    # –û–∂–∏–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
    await asyncio.sleep(0.5)

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if callback.message:
            await callback.message.delete()
    except TelegramBadRequest:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
